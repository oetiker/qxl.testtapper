{
  "version": 3,
  "sources": [
    "source/class/qxl/testtapper/Application.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "application",
    "Standalone",
    "members",
    "_cnt",
    "main",
    "cfg",
    "bom",
    "History",
    "getInstance",
    "getState",
    "split",
    "forEach",
    "item",
    "key",
    "value",
    "log",
    "appender",
    "Native",
    "matcher",
    "RegExp",
    "module",
    "getRoot",
    "add",
    "ui",
    "basic",
    "Label",
    "set",
    "rich",
    "left",
    "top",
    "console",
    "clazzes",
    "Object",
    "keys",
    "$$registry",
    "filter",
    "clazz",
    "match",
    "Promise",
    "all",
    "map",
    "runAll",
    "then",
    "info",
    "bottom",
    "that",
    "methodNames",
    "prototype",
    "name",
    "pos",
    "classname",
    "lastIndexOf",
    "pkgname",
    "substring",
    "loader",
    "dev",
    "unit",
    "TestLoaderBasic",
    "testResult",
    "TestResult",
    "methodNameIndex",
    "next",
    "runTests",
    "resolve",
    "length",
    "showExceptions",
    "arr",
    "message",
    "String",
    "exception",
    "test",
    "getClassName",
    "getName",
    "error",
    "setTimeout",
    "getSuite",
    "addListener",
    "evt",
    "getData",
    "getFullName",
    "qxl",
    "testtapper",
    "Application"
  ],
  "mappings": "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",
  "file": "Application.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright: 2018 Oetiker+Partner AG\n\n   License: MIT\n\n   Authors: Tobias Oetiker\n\n************************************************************************ */\n\n/**\n * Test Runner\n *\n * @asset(qxl/testtapper/run.js)\n */\n\nqx.Class.define(\"qxl.testtapper.Application\", {\n    extend: qx.application.Standalone,\n    members: {\n        _cnt: null,\n        main: function() {\n            this.base(arguments);\n            this._cnt = 0;\n            // eslint-disable-next-line no-undef\n            let cfg = {};\n            qx.bom.History.getInstance().getState()\n                .split(';').forEach(item => {\n                    let [key,value] = item.split('=');\n                    cfg[key] = value;\n                });\n            qx.log.appender.Native;\n            let matcher = new RegExp(\"\\\\.test\\\\.\" + (cfg.module || ''));\n            this.getRoot().add(\n                new qx.ui.basic.Label(`\n                <h1>TestTAPper - the Qooxdoo Testrunner is at work</h1>\n                <p>See the debug console of your browser for details.</p>\n                `).set({\n                    rich: true\n                }),\n                { left: 100, top: 100 }\n            );\n            if (cfg.module) {\n                console.log(\"# running only tests that match \" + cfg.module);\n            }\n            let clazzes = Object.keys(qx.Class.$$registry)\n                .filter(clazz => clazz.match(matcher));\n\n            return new qx.Promise.all(clazzes.map(\n                clazz => this.runAll(\n                    qx.Class.$$registry[clazz])\n                    .then(() => {\n                            console.info(`# done testing ${clazz}.`);\n                        }\n                    )\n                )\n            ).then(() => {\n                console.log(`1..${this._cnt}`);\n                this.getRoot().add(\n                    new qx.ui.basic.Label(`\n                    <h1>TestTAPper - is Done</h1>\n                    `).set({\n                        rich: true\n                    }),\n                    { left: 100, bottom: 100 }\n                );\n\n            });\n        },\n        runAll: function(clazz) {\n            let that = this;\n            let methodNames = Object.keys(clazz.prototype)\n                .filter(name => name.match(/^test/));\n            return new qx.Promise(resolve => {\n                let pos = clazz.classname.lastIndexOf(\".\");\n                let pkgname = clazz.classname.substring(0, pos);\n                let loader = new qx.dev.unit.TestLoaderBasic(pkgname);\n                let testResult = new qx.dev.unit.TestResult();\n                let methodNameIndex = -1;\n                let next = () => {\n                    methodNameIndex++;\n                    if (!methodNames) {\n                        console.log(`# run default tests for ${clazz.classname}`);\n                        if (methodNameIndex === 0) {\n                            loader.runTests(testResult, clazz.classname, null);\n                        }\n                        else {\n                            resolve();\n                        }\n                    }\n                    else if (methodNameIndex < methodNames.length) {\n                        console.log(`# run ${clazz.classname}:${methodNames[methodNameIndex]}`);\n                        loader.runTests(\n                            testResult,\n                            clazz.classname,\n                            methodNames[methodNameIndex]\n                        );\n                    }\n                    else {\n                        resolve();\n                    }\n                };\n                let showExceptions = arr => {\n                    arr.forEach(item => {\n                        that._cnt++;\n                        let message = String(item.exception);\n                        if (item.exception && item.exception.message) {\n                            message = item.exception.message;\n                        }\n                        console.info(`not ok ${that._cnt} - ${message} ` + item.test.getClassName() + \":\" + item.test.getName());\n                        if (item.exception && !item.exception.message) {\n                            console.error(item.exception);\n                        }\n                    });\n                    setTimeout(next, 0);\n                };\n\n                loader.getSuite().add(clazz);\n\n                testResult.addListener(\"endTest\", evt => {\n                    that._cnt++;\n                    console.info(`ok ${that._cnt} - ` + evt.getData().getFullName());\n                    setTimeout(next, 0);\n                });\n                testResult.addListener(\"wait\", evt => {\n                    that._cnt++;\n                    console.info(`not ok ${that._cnt} - stop waiting for ` + evt.getData().getFullName());\n                });\n                testResult.addListener(\"failure\", evt => showExceptions(evt.getData()));\n                testResult.addListener(\"error\", evt => showExceptions(evt.getData()));\n                testResult.addListener(\"skip\", evt => {\n                    that._cnt++;\n                    console.info(`ok ${that._cnt} - # SKIP ` + evt.getData().getFullName());\n                });\n\n                next();\n            });\n        }\n    }\n});\n"
  ]
}